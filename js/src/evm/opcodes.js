export default class Op {
  constructor(
    code,
    name = '',
    blen = 1,
    gas = undefined,
  ) {
    this.code = code
    this.name = name
    this.blen = blen
    this.gas = gas
  }

  valueOf() {
    return this.code
  }

  static parse(code) {
    const op = this.#ops[code]
    if (op === undefined) throw `Unknown op code ${code}`
    return op
  }

  static STOP = new Op(0x00, 'STOP', 1, 0)
  static ADD = new Op(0x01, 'ADD', 1, 3)
  static MUL = new Op(0x02, 'MUL', 1, 5)
  static SUB = new Op(0x03, 'SUB', 1, 3)
  static DIV = new Op(0x04, 'DIV', 1, 5)
  static SDIV = new Op(0x05, 'SDIV', 1, 5)
  static MOD = new Op(0x06, 'MOD', 1, 5)
  static SMOD = new Op(0x07, 'SMOD', 1, 5)
  static ADDMOD = new Op(0x08, 'ADDMOD', 1, 8)
  static MULMOD = new Op(0x09, 'MULMOD', 1, 8)
  static EXP = new Op(0x0a, 'EXP', 1, undefined)
  static SIGNEXTEND = new Op(0x0b, 'SIGNEXTEND', 1, 5)

  static LT = new Op(0x10, 'LT', 1, 3)
  static GT = new Op(0x11, 'GT', 1, 3)
  static SLT = new Op(0x12, 'SLT', 1, 3)
  static SGT = new Op(0x13, 'SGT', 1, 3)
  static EQ = new Op(0x14, 'EQ', 1, 3)
  static ISZERO = new Op(0x15, 'ISZERO', 1, 3)
  static AND = new Op(0x16, 'AND', 1, 3)
  static OR = new Op(0x17, 'OR', 1, 3)
  static XOR = new Op(0x18, 'XOR', 1, 3)
  static NOT = new Op(0x19, 'NOT', 1, 3)
  static BYTE = new Op(0x1a, 'BYTE', 1, 3)
  static SHL = new Op(0x1b, 'SHL', 1, 3)
  static SHR = new Op(0x1c, 'SHR', 1, 3)
  static SAR = new Op(0x1d, 'SAR', 1, 3)

  static KECCAK256 = new Op(0x20, 'KECCAK256', 1, undefined)

  static ADDRESS = new Op(0x30, 'ADDRESS', 1, 2)
  static BALANCE = new Op(0x31, 'BALANCE', 1, undefined)
  static ORIGIN = new Op(0x32, 'ORIGIN', 1, 2)
  static CALLER = new Op(0x33, 'CALLER', 1, 2)
  static CALLVALUE = new Op(0x34, 'CALLVALUE', 1, 2)
  static CALLDATALOAD = new Op(0x35, 'CALLDATALOAD', 1, 3)
  static CALLDATASIZE = new Op(0x36, 'CALLDATASIZE', 1, 2)
  static CALLDATACOPY = new Op(0x37, 'CALLDATACOPY', 1, undefined)
  static CODESIZE = new Op(0x38, 'CODESIZE', 1, 2)
  static CODECOPY = new Op(0x39, 'CODECOPY', 1, undefined)
  static GASPRICE = new Op(0x3a, 'GASPRICE', 1, 2)
  static EXTCODESIZE = new Op(0x3b, 'EXTCODESIZE', 1, undefined)
  static EXTCODECOPY = new Op(0x3c, 'EXTCODECOPY', 1, undefined)
  static RETURNDATASIZE = new Op(0x3d, 'RETURNDATASIZE', 1, undefined)
  static RETURNDATACOPY = new Op(0x3e, 'RETURNDATACOPY', 1, undefined)
  static EXTCODEHASH = new Op(0x3f, 'EXTCODEHASH', 1, undefined)

  static BLOCKHASH = new Op(0x40, 'BLOCKHASH', 1, 20)
  static COINBASE = new Op(0x41, 'COINBASE', 1, 2)
  static TIMESTAMP = new Op(0x42, 'TIMESTAMP', 1, 2)
  static NUMBER = new Op(0x43, 'NUMBER', 1, 2)
  static DIFFICULTY = new Op(0x44, 'DIFFICULTY', 1, 2)
  static GASLIMIT = new Op(0x45, 'GASLIMIT', 1, 2)
  static CHAINID = new Op(0x46, 'CHAINID', 1, 2)
  static SELFBALANCE = new Op(0x47, 'SELFBALANCE', 1, 5)
  static BASEFEE = new Op(0x48, 'BASEFEE', 1, 2)

  static POP = new Op(0x50, 'POP', 1, 2)
  static MLOAD = new Op(0x51, 'MLOAD', 1, undefined)
  static MSTORE = new Op(0x52, 'MSTORE', 1, undefined)
  static MSTORE8 = new Op(0x53, 'MSTORE8', 1, undefined)
  static SLOAD = new Op(0x54, 'SLOAD', 1, undefined)
  static SSTORE = new Op(0x55, 'SSTORE', 1, undefined)
  static JUMP = new Op(0x56, 'JUMP', 1, 8)
  static JUMPI = new Op(0x57, 'JUMPI', 1, 10)
  static PC = new Op(0x58, 'PC', 1, 2)
  static MSIZE = new Op(0x59, 'MSIZE', 1, 2)
  static GAS = new Op(0x5a, 'GAS', 1, 2)
  static JUMPDEST = new Op(0x5b, 'JUMPDEST', 1, 1)
  static PUSH0 = new Op(0x5f, 'PUSH0', 1, 2)

  static PUSH1 = new Op(0x60, 'PUSH1', 2, 3)
  static PUSH2 = new Op(0x61, 'PUSH2', 3, 3)
  static PUSH3 = new Op(0x62, 'PUSH3', 4, 3)
  static PUSH4 = new Op(0x63, 'PUSH4', 5, 3)
  static PUSH5 = new Op(0x64, 'PUSH5', 6, 3)
  static PUSH6 = new Op(0x65, 'PUSH6', 7, 3)
  static PUSH7 = new Op(0x66, 'PUSH7', 8, 3)
  static PUSH8 = new Op(0x67, 'PUSH8', 9, 3)
  static PUSH9 = new Op(0x68, 'PUSH9', 10, 3)
  static PUSH10 = new Op(0x69, 'PUSH10', 11, 3)
  static PUSH11 = new Op(0x6a, 'PUSH11', 12, 3)
  static PUSH12 = new Op(0x6b, 'PUSH12', 13, 3)
  static PUSH13 = new Op(0x6c, 'PUSH13', 14, 3)
  static PUSH14 = new Op(0x6d, 'PUSH14', 15, 3)
  static PUSH15 = new Op(0x6e, 'PUSH15', 16, 3)
  static PUSH16 = new Op(0x6f, 'PUSH16', 17, 3)

  static PUSH17 = new Op(0x70, 'PUSH17', 18, 3)
  static PUSH18 = new Op(0x71, 'PUSH18', 19, 3)
  static PUSH19 = new Op(0x72, 'PUSH19', 20, 3)
  static PUSH20 = new Op(0x73, 'PUSH20', 21, 3)
  static PUSH21 = new Op(0x74, 'PUSH21', 22, 3)
  static PUSH22 = new Op(0x75, 'PUSH22', 23, 3)
  static PUSH23 = new Op(0x76, 'PUSH23', 24, 3)
  static PUSH24 = new Op(0x77, 'PUSH24', 25, 3)
  static PUSH25 = new Op(0x78, 'PUSH25', 26, 3)
  static PUSH26 = new Op(0x79, 'PUSH26', 27, 3)
  static PUSH27 = new Op(0x7a, 'PUSH27', 28, 3)
  static PUSH28 = new Op(0x7b, 'PUSH28', 29, 3)
  static PUSH29 = new Op(0x7c, 'PUSH29', 30, 3)
  static PUSH30 = new Op(0x7d, 'PUSH30', 31, 3)
  static PUSH31 = new Op(0x7e, 'PUSH31', 32, 3)
  static PUSH32 = new Op(0x7f, 'PUSH32', 33, 3)

  static DUP1 = new Op(0x80, 'DUP1', 1, 3)
  static DUP2 = new Op(0x81, 'DUP2', 1, 3)
  static DUP3 = new Op(0x82, 'DUP3', 1, 3)
  static DUP4 = new Op(0x83, 'DUP4', 1, 3)
  static DUP5 = new Op(0x84, 'DUP5', 1, 3)
  static DUP6 = new Op(0x85, 'DUP6', 1, 3)
  static DUP7 = new Op(0x86, 'DUP7', 1, 3)
  static DUP8 = new Op(0x87, 'DUP8', 1, 3)
  static DUP9 = new Op(0x88, 'DUP9', 1, 3)
  static DUP10 = new Op(0x89, 'DUP10', 1, 3)
  static DUP11 = new Op(0x8a, 'DUP11', 1, 3)
  static DUP12 = new Op(0x8b, 'DUP12', 1, 3)
  static DUP13 = new Op(0x8c, 'DUP13', 1, 3)
  static DUP14 = new Op(0x8d, 'DUP14', 1, 3)
  static DUP15 = new Op(0x8e, 'DUP15', 1, 3)
  static DUP16 = new Op(0x8f, 'DUP16', 1, 3)

  static SWAP1 = new Op(0x90, 'SWAP1', 1, 3)
  static SWAP2 = new Op(0x91, 'SWAP2', 1, 3)
  static SWAP3 = new Op(0x92, 'SWAP3', 1, 3)
  static SWAP4 = new Op(0x93, 'SWAP4', 1, 3)
  static SWAP5 = new Op(0x94, 'SWAP5', 1, 3)
  static SWAP6 = new Op(0x95, 'SWAP6', 1, 3)
  static SWAP7 = new Op(0x96, 'SWAP7', 1, 3)
  static SWAP8 = new Op(0x97, 'SWAP8', 1, 3)
  static SWAP9 = new Op(0x98, 'SWAP9', 1, 3)
  static SWAP10 = new Op(0x99, 'SWAP10', 1, 3)
  static SWAP11 = new Op(0x9a, 'SWAP11', 1, 3)
  static SWAP12 = new Op(0x9b, 'SWAP12', 1, 3)
  static SWAP13 = new Op(0x9c, 'SWAP13', 1, 3)
  static SWAP14 = new Op(0x9d, 'SWAP14', 1, 3)
  static SWAP15 = new Op(0x9e, 'SWAP15', 1, 3)
  static SWAP16 = new Op(0x9f, 'SWAP16', 1, 3)

  static LOG0 = new Op(0xa0, 'LOG0', 1, undefined)
  static LOG1 = new Op(0xa1, 'LOG1', 1, undefined)
  static LOG2 = new Op(0xa2, 'LOG2', 1, undefined)
  static LOG3 = new Op(0xa3, 'LOG3', 1, undefined)
  static LOG4 = new Op(0xa4, 'LOG4', 1, undefined)

  static CREATE = new Op(0xf0, 'CREATE', 1, undefined)
  static CALL = new Op(0xf1, 'CALL', 1, undefined)
  static CALLCODE = new Op(0xf2, 'CALLCODE', 1, undefined)
  static RETURN = new Op(0xf3, 'RETURN', 1, undefined)
  static DELEGATECALL = new Op(0xf4, 'DELEGATECALL', 1, undefined)
  static CREATE2 = new Op(0xf5, 'CREATE2', 1, undefined)

  static STATICCALL = new Op(0xfa, 'STATICCALL', 1, undefined)
  static REVERT = new Op(0xfd, 'REVERT', 1, undefined)
  static INVALID = new Op(0xfe, 'INVALID', 1, undefined)
  static SELFDESTRUCT = new Op(0xff, 'SELFDESTRUCT', 1, undefined)

  static #ops = Array(256)
  static {
    const o = this.#ops
    o[0x00] = Op.STOP
    o[0x01] = Op.ADD
    o[0x02] = Op.MUL
    o[0x03] = Op.SUB
    o[0x04] = Op.DIV
    o[0x05] = Op.SDIV
    o[0x06] = Op.MOD
    o[0x07] = Op.SMOD
    o[0x08] = Op.ADDMOD
    o[0x09] = Op.MULMOD
    o[0x0a] = Op.EXP
    o[0x0b] = Op.SIGNEXTEND
    o[0x10] = Op.LT
    o[0x11] = Op.GT
    o[0x12] = Op.SLT
    o[0x13] = Op.SGT
    o[0x14] = Op.EQ
    o[0x15] = Op.ISZERO
    o[0x16] = Op.AND
    o[0x17] = Op.OR
    o[0x18] = Op.XOR
    o[0x19] = Op.NOT
    o[0x1a] = Op.BYTE
    o[0x1b] = Op.SHL
    o[0x1c] = Op.SHR
    o[0x1d] = Op.SAR
    o[0x20] = Op.KECCAK256
    o[0x30] = Op.ADDRESS
    o[0x31] = Op.BALANCE
    o[0x32] = Op.ORIGIN
    o[0x33] = Op.CALLER
    o[0x34] = Op.CALLVALUE
    o[0x35] = Op.CALLDATALOAD
    o[0x36] = Op.CALLDATASIZE
    o[0x37] = Op.CALLDATACOPY
    o[0x38] = Op.CODESIZE
    o[0x39] = Op.CODECOPY
    o[0x3a] = Op.GASPRICE
    o[0x3b] = Op.EXTCODESIZE
    o[0x3c] = Op.EXTCODECOPY
    o[0x3d] = Op.RETURNDATASIZE
    o[0x3e] = Op.RETURNDATACOPY
    o[0x3f] = Op.EXTCODEHASH
    o[0x40] = Op.BLOCKHASH
    o[0x41] = Op.COINBASE
    o[0x42] = Op.TIMESTAMP
    o[0x43] = Op.NUMBER
    o[0x44] = Op.DIFFICULTY
    o[0x45] = Op.GASLIMIT
    o[0x46] = Op.CHAINID
    o[0x47] = Op.SELFBALANCE
    o[0x48] = Op.BASEFEE
    o[0x50] = Op.POP
    o[0x51] = Op.MLOAD
    o[0x52] = Op.MSTORE
    o[0x53] = Op.MSTORE8
    o[0x54] = Op.SLOAD
    o[0x55] = Op.SSTORE
    o[0x56] = Op.JUMP
    o[0x57] = Op.JUMPI
    o[0x58] = Op.PC
    o[0x59] = Op.MSIZE
    o[0x5a] = Op.GAS
    o[0x5b] = Op.JUMPDEST
    o[0x5f] = Op.PUSH0
    o[0x60] = Op.PUSH1
    o[0x61] = Op.PUSH2
    o[0x62] = Op.PUSH3
    o[0x63] = Op.PUSH4
    o[0x64] = Op.PUSH5
    o[0x65] = Op.PUSH6
    o[0x66] = Op.PUSH7
    o[0x67] = Op.PUSH8
    o[0x68] = Op.PUSH9
    o[0x69] = Op.PUSH10
    o[0x6a] = Op.PUSH11
    o[0x6b] = Op.PUSH12
    o[0x6c] = Op.PUSH13
    o[0x6d] = Op.PUSH14
    o[0x6e] = Op.PUSH15
    o[0x6f] = Op.PUSH16
    o[0x70] = Op.PUSH17
    o[0x71] = Op.PUSH18
    o[0x72] = Op.PUSH19
    o[0x73] = Op.PUSH20
    o[0x74] = Op.PUSH21
    o[0x75] = Op.PUSH22
    o[0x76] = Op.PUSH23
    o[0x77] = Op.PUSH24
    o[0x78] = Op.PUSH25
    o[0x79] = Op.PUSH26
    o[0x7a] = Op.PUSH27
    o[0x7b] = Op.PUSH28
    o[0x7c] = Op.PUSH29
    o[0x7d] = Op.PUSH30
    o[0x7e] = Op.PUSH31
    o[0x7f] = Op.PUSH32
    o[0x80] = Op.DUP1
    o[0x81] = Op.DUP2
    o[0x82] = Op.DUP3
    o[0x83] = Op.DUP4
    o[0x84] = Op.DUP5
    o[0x85] = Op.DUP6
    o[0x86] = Op.DUP7
    o[0x87] = Op.DUP8
    o[0x88] = Op.DUP9
    o[0x89] = Op.DUP10
    o[0x8a] = Op.DUP11
    o[0x8b] = Op.DUP12
    o[0x8c] = Op.DUP13
    o[0x8d] = Op.DUP14
    o[0x8e] = Op.DUP15
    o[0x8f] = Op.DUP16
    o[0x90] = Op.SWAP1
    o[0x91] = Op.SWAP2
    o[0x92] = Op.SWAP3
    o[0x93] = Op.SWAP4
    o[0x94] = Op.SWAP5
    o[0x95] = Op.SWAP6
    o[0x96] = Op.SWAP7
    o[0x97] = Op.SWAP8
    o[0x98] = Op.SWAP9
    o[0x99] = Op.SWAP10
    o[0x9a] = Op.SWAP11
    o[0x9b] = Op.SWAP12
    o[0x9c] = Op.SWAP13
    o[0x9d] = Op.SWAP14
    o[0x9e] = Op.SWAP15
    o[0x9f] = Op.SWAP16
    o[0xa0] = Op.LOG0
    o[0xa1] = Op.LOG1
    o[0xa2] = Op.LOG2
    o[0xa3] = Op.LOG3
    o[0xa4] = Op.LOG4
    o[0xf0] = Op.CREATE
    o[0xf1] = Op.CALL
    o[0xf2] = Op.CALLCODE
    o[0xf3] = Op.RETURN
    o[0xf4] = Op.DELEGATECALL
    o[0xf5] = Op.CREATE2
    o[0xfa] = Op.STATICCALL
    o[0xfd] = Op.REVERT
    o[0xfe] = Op.INVALID
    o[0xff] = Op.SELFDESTRUCT
  }
}
